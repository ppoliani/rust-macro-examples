use darling::{util::PathList, FromDeriveInput, FromMeta};

// Derive `FromDeriveInput` for this struct, which is a
// macro provided by darling to automatically add the ability
// to parse argument tokens into the given struct.
#[derive(FromDeriveInput, Clone)]
// We tell darling that we're looking for arguments
// that are defined using the `custom_model` attribute, and
// that we only support named structs for this.
#[darling(attributes(custom_model), supports(struct_named))]
pub struct CustomModelArgs {
  // Specify parameters for generating a derive model. Multiple models can be generated by repeating
  // this attribute with parameters for each model.
  #[darling(default, multiple, rename = "model")]
  pub models: Vec<CustomModelDef>
}

// Derive `FromMeta` for this struct, which is a
// macro provided by darling to automatically add the ability
// to parse metadata into the given struct.
#[derive(FromMeta, Clone)]
pub struct CustomModelDef {
  // Name of the generated model.
  pub name: String,
  // Comma-separated list of field identifiers to be included in the generated model
  pub fields: PathList,
  // List of additional derives to apply to the resulting struct such as `Eq` or `Hash`.
  #[darling(default)]
  pub extra_derives: PathList,
}
